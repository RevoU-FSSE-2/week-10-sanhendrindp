openapi: 3.0.0
info:
  title: RevoU Week 10 Projects - Building RESTful API
  version: 1.0.0
  description: Created using NodeJs, ExpressJs, and MonggoDB
servers:
  - url: http://localhost:3000
    description: For development server
  # - url: http://localhost:3001
  #   description: For public server
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Bearer with JWT token"
  schemas:
    RegisterUser:
      type: object
      properties:
        username:
          type: string
          minLength: 5
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*[a-zA-Z])(?=.*[0-9]).*$"
        role:
          type: string
          enum:
            - "maker"
            - "approver"
      required:
        - "username"
        - "password"
        - "role"
    LoginUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    BadRequest:
      type: object
      properties:
        message:
          type: string
    Transfer:
      type: object
      properties:
        amount:
          type: integer
        information:
          type: string
        status:
          type: string
          enum:
            - "pending"
            - "approved"
      required:
        - "amount"
        - "information"
        - "status"
paths:
  /users/register:
    post:
      summary: Register for new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      role:
                        type: string

        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
  /users/login:
    post:
      summary: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: "Login success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
  /transfers:
    get:
      security:
        - bearer: []
      summary: Get all transfers
      responses:
        "200":
          description: "Get all transfers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        amount:
                          type: integer
                        information:
                          type: string
    post:
      security:
        - bearer: []
      summary: Create a transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transfer"
      responses:
        "201":
          description: Transfer successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      amount:
                        type: integer
                      information:
                        type: string
                      status:
                        type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
  /transfers/approve:
    post:
      summary: Approve a transfer
      requestBody:
        description: Request body for transfer approval
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transferId:
                  type: string
                  description: The ID of the transfer to approve
                status:
                  type: string
                  enum:
                    - approved
                    - not approved
                  description: The status is only "approved" or "not approved"
      responses:
        "200":
          description: Transfer successfully approved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
